// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtni6cNK12EcL932jgndvh
// Component: KpC4evpbADbK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ListItem from "../../ListItem"; // plasmic-import: v4ZRRYhwc7ce/component
import Link2 from "../../Link"; // plasmic-import: IwhFmF_FJA2Z/component
import Label from "../../Label"; // plasmic-import: fNJbizGxPNsf/component
import Kicker from "../../Kicker"; // plasmic-import: XQJuZyBgliaF/component
import ShareIcons from "../../ShareIcons"; // plasmic-import: eF322vkNvEYD/component
import Badge from "../../Badge"; // plasmic-import: dsQZkF05k1eT/component
import ListGroup from "../../ListGroup"; // plasmic-import: 5d5wBdaObk2D/component
import ListItem2 from "../../ListItem"; // plasmic-import: HmsKVTz2YTwg/component
import Headline from "../../Headline"; // plasmic-import: REWXmYbiQRWU/component
import Icon from "../../Icon"; // plasmic-import: ItvQ-B2u291_/component
import Input from "../../Input"; // plasmic-import: WS1ROjE9xoiD/component
import Image from "../../Image"; // plasmic-import: kMXeIUhoTCQh/component
import Button from "../../Button"; // plasmic-import: HZALSXZYRn0N/component
import ContactIcons from "../../ContactIcons"; // plasmic-import: S52QNAvX1797/component
import Content from "../../Content"; // plasmic-import: -OzGQ9WYy-qh/component
import Checkbox from "../../Checkbox"; // plasmic-import: VhOsFLLMZnAE/component
import Separator from "../../Separator"; // plasmic-import: Z-hb0HfwKzQF/component
import Card from "../../Card"; // plasmic-import: JrxDjy8SC-sL/component
import Image2 from "../../Image"; // plasmic-import: p-kJ8jBM6L2n/component
import Title from "../../Title"; // plasmic-import: HXMutnkmSvNq/component
import Kicker2 from "../../Kicker"; // plasmic-import: qnV728Aa_F0x/component
import Headline2 from "../../Headline"; // plasmic-import: NdtUkXEo8LWs/component
import SubHeadline from "../../SubHeadline"; // plasmic-import: EH1rm_aNnjkh/component
import ListGroup2 from "../../ListGroup"; // plasmic-import: qdCxro9aMvJ3/component
import Button2 from "../../Button"; // plasmic-import: 3BnfwULcRUyf/component
import SocialIcons from "../../SocialIcons"; // plasmic-import: O67FO_t5_vVb/component
import ShareIcons2 from "../../ShareIcons"; // plasmic-import: KMO7SWeBEoe7/component
import ContactIcons2 from "../../ContactIcons"; // plasmic-import: yqkAy7kTEo-g/component
import SocialIcons2 from "../../SocialIcons"; // plasmic-import: hZruKaJSmk0U/component
import Avatar from "../../Avatar"; // plasmic-import: wJBjzkSIjN4M/component
import SubHeadline2 from "../../SubHeadline"; // plasmic-import: tQK_DkHc7NzO/component
import Switch from "../../Switch"; // plasmic-import: Ua0zd5NqT5dc/component
import Title2 from "../../Title"; // plasmic-import: T0eKzl0buWW2/component
import Tokens from "../../Tokens"; // plasmic-import: RT-UhVf_cp05/component

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_list_group_css from "../list_group/plasmic.module.css"; // plasmic-import: vdyuckzTfD3wQ2e6DnsVHo/projectcss
import plasmic_label_css from "../label/plasmic.module.css"; // plasmic-import: hNcAxYG8R1eSmuzeUeAQYf/projectcss
import plasmic_kicker_css from "../kicker/plasmic.module.css"; // plasmic-import: fBeERBQAnyanAaLZ4nhRvg/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_headline_css from "../headline/plasmic.module.css"; // plasmic-import: gXd6w7L89NWPNeJmpaYS3W/projectcss
import plasmic_content_css from "../content/plasmic.module.css"; // plasmic-import: xpyP1X2yhd8ZY24SVBFr1E/projectcss
import plasmic_checkbox_css from "../checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_card_css from "../card/plasmic.module.css"; // plasmic-import: sZLRCyi9YYe7t6BG9GcNjp/projectcss
import plasmic_title_css from "../title/plasmic.module.css"; // plasmic-import: 77r5g6Swry3x5EDhnHGHyj/projectcss
import plasmic_sub_headline_css from "../sub_headline/plasmic.module.css"; // plasmic-import: 55QiaDppxCP7g9b2J75qMu/projectcss
import plasmic_link_css from "../link/plasmic.module.css"; // plasmic-import: 9cLG8PgSvqkoRbLtirXmUr/projectcss
import plasmic_select_css from "../select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wtni6cNK12EcL932jgndvh/projectcss
import sty from "./PlasmicAbc.module.css"; // plasmic-import: KpC4evpbADbK/css

import FaBarssvgIcon from "./icons/PlasmicIcon__FaBarssvg"; // plasmic-import: ZSf8HMFnFxCj/icon
import FaShareSquaresvgIcon from "./icons/PlasmicIcon__FaShareSquaresvg"; // plasmic-import: BbPu0oaPT6RU/icon
import FaBookmarkSolidsvgIcon from "./icons/PlasmicIcon__FaBookmarkSolidsvg"; // plasmic-import: xfcjBO0u9rHU/icon
import FaBarssvgIcon2 from "../list_item/icons/PlasmicIcon__FaBarssvg"; // plasmic-import: nkTA0SEj1EAz/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: kW4ViPs8xnOQ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: X4plzB-M7NZn/icon
import FaChecksvgIcon from "../button/icons/PlasmicIcon__FaChecksvg"; // plasmic-import: 2TAj_FBTgcH-/icon
import FaArrowRightsvgIcon from "../button/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: o-asKjci-D-m/icon
import FaPhoneSolidsvgIcon from "./icons/PlasmicIcon__FaPhoneSolidsvg"; // plasmic-import: tvF2QygPYnl7/icon
import FaMessageSolidsvgIcon from "./icons/PlasmicIcon__FaMessageSolidsvg"; // plasmic-import: XLKgX21lOs-T/icon
import FaEmailSolidsvgIcon from "./icons/PlasmicIcon__FaEmailSolidsvg"; // plasmic-import: XKnZB0JB-1ul/icon
import FaCalendarSolidsvgIcon from "./icons/PlasmicIcon__FaCalendarSolidsvg"; // plasmic-import: CqELayz2F3bJ/icon
import FaBarssvgIcon3 from "../list_group/icons/PlasmicIcon__FaBarssvg"; // plasmic-import: _UwRqxzZIsvu/icon
import FaEnvelopeRegularsvgIcon from "./icons/PlasmicIcon__FaEnvelopeRegularsvg"; // plasmic-import: guGEVwdXOfRS/icon
import FaXTwittersvgIcon from "./icons/PlasmicIcon__FaXTwittersvg"; // plasmic-import: UPRn-N2ChtlG/icon
import FaMastodonsvgIcon from "./icons/PlasmicIcon__FaMastodonsvg"; // plasmic-import: _6pY6evrJ3Xz/icon
import FaTiktoksvgIcon from "./icons/PlasmicIcon__FaTiktoksvg"; // plasmic-import: C1zNoehGxprW/icon
import FaSnapchatsvgIcon from "./icons/PlasmicIcon__FaSnapchatsvg"; // plasmic-import: 1Klf-mZAqcxt/icon
import FaThreadssvgIcon from "./icons/PlasmicIcon__FaThreadssvg"; // plasmic-import: yILPqnw4EqMl/icon
import FaInstagramsvgIcon from "./icons/PlasmicIcon__FaInstagramsvg"; // plasmic-import: Cbxen8vfm8l3/icon
import FaLinkedinInsvgIcon from "./icons/PlasmicIcon__FaLinkedinInsvg"; // plasmic-import: u4ArnopHsPBX/icon
import FaFacebookFsvgIcon from "./icons/PlasmicIcon__FaFacebookFsvg"; // plasmic-import: Aa68LS0lWvo-/icon
import FaSquarePinterestsvgIcon from "./icons/PlasmicIcon__FaSquarePinterestsvg"; // plasmic-import: AgyPcpiSVbhC/icon
import FaWhatsappsvgIcon from "./icons/PlasmicIcon__FaWhatsappsvg"; // plasmic-import: jGlmuzkSmJPM/icon
import FaTelegramsvgIcon from "./icons/PlasmicIcon__FaTelegramsvg"; // plasmic-import: Ktu3CdDh7lJG/icon
import FaDiscordsvgIcon from "./icons/PlasmicIcon__FaDiscordsvg"; // plasmic-import: Bt2b5rYBXH_d/icon
import FaMediumsvgIcon from "./icons/PlasmicIcon__FaMediumsvg"; // plasmic-import: tNyR2Br5k3Ik/icon
import FaRedditsvgIcon from "./icons/PlasmicIcon__FaRedditsvg"; // plasmic-import: DESOgiZABbbf/icon
import FaDiscoursesvgIcon from "./icons/PlasmicIcon__FaDiscoursesvg"; // plasmic-import: Jfj0A1SW-vQR/icon
import FaTumblrsvgIcon from "./icons/PlasmicIcon__FaTumblrsvg"; // plasmic-import: nLOtUNPWK5B5/icon
import FaSkypesvgIcon from "./icons/PlasmicIcon__FaSkypesvg"; // plasmic-import: oc1YQxhR1_xd/icon
import FaYoutubesvgIcon from "./icons/PlasmicIcon__FaYoutubesvg"; // plasmic-import: 1pYEWGQHVVif/icon
import FaVimeoVsvgIcon from "./icons/PlasmicIcon__FaVimeoVsvg"; // plasmic-import: ruuTOFgSN2wJ/icon
import FaGithubsvgIcon from "./icons/PlasmicIcon__FaGithubsvg"; // plasmic-import: PU9ZyjQUVXM_/icon
import FaGitlabsvgIcon from "./icons/PlasmicIcon__FaGitlabsvg"; // plasmic-import: noAvw9rCitYx/icon
import FaBehancesvgIcon from "./icons/PlasmicIcon__FaBehancesvg"; // plasmic-import: qKtDA2nF7dyY/icon
import FaDribbblesvgIcon from "./icons/PlasmicIcon__FaDribbblesvg"; // plasmic-import: EXkXcJtFpMFW/icon
import FaFigmasvgIcon from "./icons/PlasmicIcon__FaFigmasvg"; // plasmic-import: Tr3oBPg5UkVp/icon
import FaUnsplashsvgIcon from "./icons/PlasmicIcon__FaUnsplashsvg"; // plasmic-import: o4TH-GSp0lZg/icon
import FaTwitchsvgIcon from "./icons/PlasmicIcon__FaTwitchsvg"; // plasmic-import: WlQlDgsHVIJ_/icon
import FaSteamsvgIcon from "./icons/PlasmicIcon__FaSteamsvg"; // plasmic-import: 5hL_0Hiz1Qg4/icon
import FaSpotifysvgIcon from "./icons/PlasmicIcon__FaSpotifysvg"; // plasmic-import: U_Msm-HifOwt/icon
import FaLastfmsvgIcon from "./icons/PlasmicIcon__FaLastfmsvg"; // plasmic-import: X-m_u1Nt60cQ/icon
import FaSoundcloudsvgIcon from "./icons/PlasmicIcon__FaSoundcloudsvg"; // plasmic-import: OMyZVz9--HUQ/icon
import FaShopifysvgIcon from "./icons/PlasmicIcon__FaShopifysvg"; // plasmic-import: IVXO1vOy-c44/icon
import FaUsersvgIcon from "./icons/PlasmicIcon__FaUsersvg"; // plasmic-import: kc50sArKkfol/icon

createPlasmicElementProxy;

export type PlasmicAbc__VariantMembers = {};
export type PlasmicAbc__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbc__VariantsArgs;
export const PlasmicAbc__VariantProps = new Array<VariantPropType>();

export type PlasmicAbc__ArgsType = {};
type ArgPropType = keyof PlasmicAbc__ArgsType;
export const PlasmicAbc__ArgProps = new Array<ArgPropType>();

export type PlasmicAbc__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<typeof Link2>;
  label?: Flex__<typeof Label>;
  kicker?: Flex__<typeof Kicker>;
  badge?: Flex__<typeof Badge>;
  listGroup?: Flex__<typeof ListGroup>;
  headline?: Flex__<typeof Headline>;
  icon?: Flex__<typeof Icon>;
  input?: Flex__<typeof Input>;
  image?: Flex__<typeof Image>;
  freeBox?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  contactIcons?: Flex__<typeof ContactIcons>;
  content?: Flex__<typeof Content>;
  checkbox?: Flex__<typeof Checkbox>;
  separator?: Flex__<typeof Separator>;
  card?: Flex__<typeof Card>;
  socialIcons?: Flex__<typeof SocialIcons2>;
  avatar?: Flex__<typeof Avatar>;
  subHeadline?: Flex__<typeof SubHeadline2>;
  _switch?: Flex__<typeof Switch>;
  title?: Flex__<typeof Title2>;
  tokens?: Flex__<typeof Tokens>;
};

export interface DefaultAbcProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbc__RenderFunc(props: {
  variants: PlasmicAbc__VariantsArgs;
  args: PlasmicAbc__ArgsType;
  overrides: PlasmicAbc__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_core_css.plasmic_tokens,
            plasmic_semantic_css.plasmic_tokens,
            plasmic_typography_css.plasmic_tokens,
            plasmic_switch_css.plasmic_tokens,
            plasmic_menu_item_css.plasmic_tokens,
            plasmic_list_item_css.plasmic_tokens,
            plasmic_list_group_css.plasmic_tokens,
            plasmic_label_css.plasmic_tokens,
            plasmic_kicker_css.plasmic_tokens,
            plasmic_input_css.plasmic_tokens,
            plasmic_image_css.plasmic_tokens,
            plasmic_icon_css.plasmic_tokens,
            plasmic_headline_css.plasmic_tokens,
            plasmic_content_css.plasmic_tokens,
            plasmic_checkbox_css.plasmic_tokens,
            plasmic_avatar_css.plasmic_tokens,
            plasmic_badge_css.plasmic_tokens,
            plasmic_button_css.plasmic_tokens,
            plasmic_card_css.plasmic_tokens,
            plasmic_title_css.plasmic_tokens,
            plasmic_sub_headline_css.plasmic_tokens,
            plasmic_link_css.plasmic_tokens,
            plasmic_select_css.plasmic_tokens,
            sty.root,
            {
              [plasmic_core_css.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            }
          )}
        >
          <ListItem
            className={classNames("__wab_instance", sty.listItem__rqNmf)}
          />

          <Link2
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames("__wab_instance", sty.link)}
          >
            {"Text Link"}
          </Link2>
          <Label
            data-plasmic-name={"label"}
            data-plasmic-override={overrides.label}
            className={classNames("__wab_instance", sty.label)}
          />

          <Kicker
            data-plasmic-name={"kicker"}
            data-plasmic-override={overrides.kicker}
            className={classNames("__wab_instance", sty.kicker)}
            contentSlot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b5Ol3
                )}
              >
                {"Token Zen Garden"}
              </div>
            }
          />

          <ShareIcons
            className={classNames("__wab_instance", sty.shareIcons__gx642)}
          />

          <Badge
            data-plasmic-name={"badge"}
            data-plasmic-override={overrides.badge}
            className={classNames("__wab_instance", sty.badge)}
          />

          <ListGroup
            data-plasmic-name={"listGroup"}
            data-plasmic-override={overrides.listGroup}
            className={classNames("__wab_instance", sty.listGroup)}
            listItemSlot2={
              <ListItem2
                className={classNames("__wab_instance", sty.listItem__gXelg)}
                listContentSlot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xgTj
                    )}
                  >
                    {"Time speeds swiftly"}
                  </div>
                }
              />
            }
          />

          <Headline
            data-plasmic-name={"headline"}
            data-plasmic-override={overrides.headline}
            className={classNames("__wab_instance", sty.headline)}
          />

          <Icon
            data-plasmic-name={"icon"}
            data-plasmic-override={overrides.icon}
            className={classNames("__wab_instance", sty.icon)}
          />

          <Input
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames("__wab_instance", sty.input)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["input", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            value={generateStateValueProp($state, ["input", "value"]) ?? ""}
          />

          <Image
            data-plasmic-name={"image"}
            data-plasmic-override={overrides.image}
            className={classNames("__wab_instance", sty.image)}
            imageSlot={
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              </div>
            }
          />

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            endIcon={
              <FaArrowRightsvgIcon
                className={classNames(projectcss.all, sty.svg__sbGm)}
                role={"img"}
              />
            }
            startIcon={
              <FaChecksvgIcon
                className={classNames(projectcss.all, sty.svg___1Cz8N)}
                role={"img"}
              />
            }
          />

          <ContactIcons
            data-plasmic-name={"contactIcons"}
            data-plasmic-override={overrides.contactIcons}
            className={classNames("__wab_instance", sty.contactIcons)}
          />

          <Content
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames("__wab_instance", sty.content)}
          />

          <Checkbox
            data-plasmic-name={"checkbox"}
            data-plasmic-override={overrides.checkbox}
            className={classNames("__wab_instance", sty.checkbox)}
            isChecked={
              generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                eventArgs[0]
              );
            }}
          />

          <Separator
            data-plasmic-name={"separator"}
            data-plasmic-override={overrides.separator}
            className={classNames("__wab_instance", sty.separator)}
          />

          <Card
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            className={classNames("__wab_instance", sty.card)}
          />

          <ShareIcons
            className={classNames("__wab_instance", sty.shareIcons__xsCg9)}
          />

          <SocialIcons2
            data-plasmic-name={"socialIcons"}
            data-plasmic-override={overrides.socialIcons}
            className={classNames("__wab_instance", sty.socialIcons)}
          />

          <Avatar
            data-plasmic-name={"avatar"}
            data-plasmic-override={overrides.avatar}
            className={classNames("__wab_instance", sty.avatar)}
          />

          <SubHeadline2
            data-plasmic-name={"subHeadline"}
            data-plasmic-override={overrides.subHeadline}
            className={classNames("__wab_instance", sty.subHeadline)}
          />

          <Switch
            data-plasmic-name={"_switch"}
            data-plasmic-override={overrides._switch}
            className={classNames("__wab_instance", sty._switch)}
            isChecked={
              generateStateValueProp($state, ["_switch", "isChecked"]) ?? false
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["_switch", "isChecked"])(
                eventArgs[0]
              );
            }}
          />

          <Title2
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames("__wab_instance", sty.title)}
          />

          <Tokens
            data-plasmic-name={"tokens"}
            data-plasmic-override={overrides.tokens}
            className={classNames("__wab_instance", sty.tokens)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "label",
    "kicker",
    "badge",
    "listGroup",
    "headline",
    "icon",
    "input",
    "image",
    "freeBox",
    "img",
    "button",
    "contactIcons",
    "content",
    "checkbox",
    "separator",
    "card",
    "socialIcons",
    "avatar",
    "subHeadline",
    "_switch",
    "title",
    "tokens"
  ],
  link: ["link"],
  label: ["label"],
  kicker: ["kicker"],
  badge: ["badge"],
  listGroup: ["listGroup"],
  headline: ["headline"],
  icon: ["icon"],
  input: ["input"],
  image: ["image", "freeBox", "img"],
  freeBox: ["freeBox", "img"],
  img: ["img"],
  button: ["button"],
  contactIcons: ["contactIcons"],
  content: ["content"],
  checkbox: ["checkbox"],
  separator: ["separator"],
  card: ["card"],
  socialIcons: ["socialIcons"],
  avatar: ["avatar"],
  subHeadline: ["subHeadline"],
  _switch: ["_switch"],
  title: ["title"],
  tokens: ["tokens"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: typeof Link2;
  label: typeof Label;
  kicker: typeof Kicker;
  badge: typeof Badge;
  listGroup: typeof ListGroup;
  headline: typeof Headline;
  icon: typeof Icon;
  input: typeof Input;
  image: typeof Image;
  freeBox: "div";
  img: typeof PlasmicImg__;
  button: typeof Button;
  contactIcons: typeof ContactIcons;
  content: typeof Content;
  checkbox: typeof Checkbox;
  separator: typeof Separator;
  card: typeof Card;
  socialIcons: typeof SocialIcons2;
  avatar: typeof Avatar;
  subHeadline: typeof SubHeadline2;
  _switch: typeof Switch;
  title: typeof Title2;
  tokens: typeof Tokens;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbc__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbc__VariantsArgs;
    args?: PlasmicAbc__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbc__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbc__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbc__ArgProps,
          internalVariantPropNames: PlasmicAbc__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbc__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbc";
  } else {
    func.displayName = `PlasmicAbc.${nodeName}`;
  }
  return func;
}

export const PlasmicAbc = Object.assign(
  // Top-level PlasmicAbc renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    label: makeNodeComponent("label"),
    kicker: makeNodeComponent("kicker"),
    badge: makeNodeComponent("badge"),
    listGroup: makeNodeComponent("listGroup"),
    headline: makeNodeComponent("headline"),
    icon: makeNodeComponent("icon"),
    input: makeNodeComponent("input"),
    image: makeNodeComponent("image"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    contactIcons: makeNodeComponent("contactIcons"),
    content: makeNodeComponent("content"),
    checkbox: makeNodeComponent("checkbox"),
    separator: makeNodeComponent("separator"),
    card: makeNodeComponent("card"),
    socialIcons: makeNodeComponent("socialIcons"),
    avatar: makeNodeComponent("avatar"),
    subHeadline: makeNodeComponent("subHeadline"),
    _switch: makeNodeComponent("_switch"),
    title: makeNodeComponent("title"),
    tokens: makeNodeComponent("tokens"),

    // Metadata about props expected for PlasmicAbc
    internalVariantProps: PlasmicAbc__VariantProps,
    internalArgProps: PlasmicAbc__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbc;
/* prettier-ignore-end */
